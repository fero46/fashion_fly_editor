'use strict';

class HeadersController
  constructor: ($scope, $rootScope, Category) ->
    console.log $scope, $rootScope
    self = @

    category = new Category()
    $scope.categories = category.all()

    $scope.updateCategories = (id) ->
      $rootScope.$broadcast("select_main_category", id: id)

class ActionsController
  constructor: ($scope, Item, Collection, ngDialog) ->
    console.log "init me"
    self = @

    $scope.baseUrl = window.location.origin + window.location.pathname + '/collections'

    $scope.collection = Collection
    $scope.collection.title = "Give me a title"
    $scope.showForm = true
    $scope.title = "Kollektion speichern"
    $scope.body  = "Nur noch wenige Schritte"

    $scope.presaveCollection = ->
      console.log "saveCollection"
      console.log $scope.collection
      console.log $scope.collection.price()

      $scope.dialog ngDialog.open
        controller: 'ActionsController'
        template: $scope.baseUrl + '/new'
        className: 'ngdialog-theme-plain'

    $scope.saveCollection = ->
      Item.create($scope)

    $scope.collectionSuccessCallback = (data, status) ->
      console.log "success"
      console.log $scope.dialog
      console.log data, status
      $scope.collection = data
      $scope.title = "Kollektion gespeichert."
      # tbd: use template
      $scope.body = "<img src='#{data.image.url}' />"
      $scope.showForm = false

    # called if creation fails
    $scope.collectionErrorCallback = (data, status) ->
      $scope.title = "Bar"
      console.log "error"
      console.log data, status
      ngDialog.open
        controller: 'ActionsController'
        template: '<p>{{ title }} Fehler: Kollektion konnte nicht gespeichert werden.</p>'
        plain: true
        className: 'ngdialog-theme-plain'

    $scope.collectionMetaInformation = ->
      price = $scope.collection.price()
      if price? && price != 0
        return price.toFixed(2)
      else
        return false

    $scope.collectionItemCount = ->
      items = Item.all()
      # think not supported in ie8
      Object.keys(items).length

class SidebarsController
  constructor: ($scope, Search, Category) ->
    self = @

    # events
    $scope.$on "select_main_category", (event, args) ->
      $scope.category_id = args.id
      $scope.categories  = $scope.Category.get($scope.category_id)

    $scope.$on "update_category", (event, args) ->
      $scope.selectCategory(args.id)

    $scope.$on "category_loaded", (event, args) ->
      $scope.resetFilters()
      $scope.brands      = if args.brands? then args.brands else []
      $scope.colors      = if args.colors? then args.colors else []
      $scope.priceRanges = if args.price_ranges? then args.price_ranges else []

    $scope.$on "search_loaded", (event, args) ->
      console.log "search loaded"
      $scope.pagination.update(args.pagination) if args.pagination?
      console.log $scope.pagination

    # init Pagination Object
    $scope.pagination =
      current_page: null
      total_pages: null
      first_page: null
      last_page: null
      total_count: null
      paginate: (page) ->
        @current_page = page
        $scope.updateItems()
      update: (vals) ->
        @current_page = vals.current_page
        @total_pages  = vals.total_pages
        @first_page   = vals.first_page
        @last_page    = vals.last_page
        @total_count  = vals.total_count
      reset: ->
        @current_page = null
        @total_pages  = null
        @first_page   = null
        @last_page    = null
        @total_count  = null

    # init Categories and Search
    $scope.Category = new Category()
    $scope.categories = $scope.Category.get(<%= FashionFlyEditor::Engine.configuration.startup_category_id %>)

    $scope.Search = new Search()
    $scope.products = $scope.Search.all()

    $scope.resetFilters = ->
      console.log "resetting filters"
      $scope.filter_subcategory = null
      $scope.filter_brand       = null
      $scope.filter_color       = null
      $scope.filter_priceRange  = null

    $scope.resetItems = ->
      $scope.brands = []
      $scope.colors = []
      $scope.priceRanges = []
      $scope.subcategories = []

    $scope.selectCategory = (id) ->
      console.log "selecting category #{id}"
      $scope.category_id   = id
      $scope.subcategories = $scope.Category.get($scope.category_id)
      params =
        category: $scope.category_id

      $scope.pagination.reset()
      $scope.products = $scope.Search.all(params)

    $scope.selectProduct = (id) ->
      console.log "selecting product #{id}"

    $scope.updateFilters = ->
      $scope.pagination.reset()
      $scope.updateItems()

    $scope.updateItems = ->
      console.log "updating items based on filter"
      params =
        category: if $scope.filter_subcategory? then $scope.filter_subcategory.id else $scope.category_id
        brand: if $scope.filter_brand? then $scope.filter_brand.id
        color: if $scope.filter_color? then $scope.filter_color.hex.split("#")[1]
        price: if $scope.filter_priceRange? then $scope.filter_priceRange.range
        page: if $scope.pagination.current_page? then $scope.pagination.current_page

      $scope.products = $scope.Search.all(params)

app = angular.module('ffe', ['ngResource', 'ngDialog', 'ngSanitize'])

app.factory 'Collection', ($http, Item) ->
  collection:
    title: null
    price: null

  price: ->
    console.log "collection price"
    items = Item.all()
    price = 0
    $.each items, (key, value) ->
      price += parseFloat(items[key]["price"])
    price

app.factory 'Item', ($http) ->
  items: {}

  #helper
  itemsAsArray: ->
    self = @
    allItems = []
    $.each @items, (key, value) ->
      self.items[key]['item_id'] = self.items[key]['id']
      allItems.push self.items[key]
    allItems

  create: (scope) ->
    # we pass in controller scope for calling callback
    self = @
    self.scope = scope

    url = window.location.origin + window.location.pathname + '/collections'

    console.log scope.collection.title

    data = {
      collection: {
        title: scope.collection.title
        collection_items_attributes: @itemsAsArray()
      }
    }

    $http(
      method: 'POST'
      url: url
      data: data
      dataType: 'JSON'
    ).success (data, status, headers, config) ->
      console.log "success"
      scope.collectionSuccessCallback(data, status) if self.scope?

    .error (data, status, headers, config) ->
      console.log "error on creation"
      scope.collectionErrorCallback(data, status) if self.scope?

  get: (key) ->
    @items[key]

  add: (key, item) ->
    @update key, item

  update: (key, item) ->
    @items[key] = item

  delete: (key) ->
    delete @items[key]

  all: ->
    @items

app.factory 'Search', ($resource, $rootScope) ->
  class Search
    constructor: () ->
      @service = $resource("<%= FashionFlyEditor::Engine.configuration.products_endpoint %>/:id",
        { id: '@id'},
        { query: { method: "GET", isArray: false,  } })

    all: (params = {}) ->
      @service.query(params, (data) ->
        $rootScope.$broadcast("search_loaded", data)
      )

app.factory 'Category', ($resource, $rootScope) ->
  class Category
    constructor: (categoryId) ->
      @service = $resource("<%= FashionFlyEditor::Engine.configuration.categories_endpoint %>/:id"
        { id: '@id' },
        { query: { method: "GET", isArray: false,  } })

    create: (attrs) ->
      new @service(category: attrs).$save (category) ->
        attrs.id = category.id
      attrs

    get: (id) ->
      @service.get(id: id, (data) ->
        console.log data
        $rootScope.$broadcast("category_loaded", data)
      )

    all: (cb) ->
      self = @

      @service.query( (data) ->
        self.firstCategoryId = data.categories[0].id
        self.brands = data.categories.brands
        $rootScope.$broadcast("category_loaded", id: self.firstCategoryId)
      )

    firstCategoryId: ->
      @firstCategoryId

    brands: ->
      @brands

app.controller("SidebarsController", ["$scope", "Search", "Category", SidebarsController])
app.controller("ActionsController", ["$scope", "Item", 'Collection', 'ngDialog', ActionsController])
app.controller("HeadersController", ["$scope", "$rootScope", "Category", HeadersController])

### DIRECTIVES ###

app.directive 'draggable', ->
  restrict:'A'
  link: (scope, element, attrs) ->
    element.draggable
      revert: true

app.directive 'droppable', ['$compile', 'Item', 'Collection', ($compile, Item, Collection) ->
  items      = Item
  dir =     {}

  dir.restrict = 'A'
  dir.link = (scope, element, attrs) ->
    self = @

    element.droppable
      hoverClass: "drop-hover",
      drop: (e, ui) ->

        # check if newly added item
        if $(ui.draggable[0]).data('item')?
          item       = $(ui.draggable[0]).data('item')
          position_x = ui.offset.left
          position_y = ui.offset.top

          # random key for element
          key = Math.random().toString(36).replace(/[^a-z]+/g, '')

          # create item on canvas
          el = angular.element "<div id='ffe-item_#{key}' style='display: inline-block; position: absolute; top:#{position_y}px;left:#{position_x}px'><div class='item__remove'>x</div><img src='#{item.image}' style='width:100%;height:100%' /></div>"

          el.draggable
            stop: (e, ui) ->
              item['position_x'] = ui.position.left - $('.ffe-editor__canvas').offset().left
              item['position_y'] = ui.position.top - $('.ffe-editor__canvas').offset().top
              items.update key, item

          el.resizable
            aspectRatio: true
            stop: (e, ui) ->
              item['width']  = ui.size.width
              item['height'] = ui.size.height
              items.update key, item

          el.rotatable
            stop: (e, ui) ->
              deg = ui.angle.stop * (180/3.14159265) # convert radian to degrees
              item['rotation'] = deg
              items.update key, item

          element.append(el)

          # set initial values for item and add to collection
          item['position_x'] = position_x - $('.ffe-editor__canvas').offset().left
          item['position_y'] = position_y - $('.ffe-editor__canvas').offset().top
          item['rotation']   = 0
          item['width']      = el.width()
          item['height']     = el.height()
          items.add key, item

          # add remove item
          element.find('.item__remove').on 'click', (e) ->
            $el = $(e.currentTarget).parent()
            console.log key
            items.delete $el.attr('id').split('_')[1]
            $el.remove()

        else
          console.log "move me around"
          position_x = ui.offset.left - $(this).offset().left
          position_y = ui.offset.top - $(this).offset().top

        # debug info
        console.log items.all()

  dir
]

### CONFIG ###

app.config ($httpProvider) ->
  #authToken = $("meta[name=\"csrf-token\"]").attr("content")
  #$httpProvider.defaults.headers.common["X-CSRF-TOKEN"] = authToken
  $httpProvider.defaults.headers.common["Accept"] = 'application/json'
